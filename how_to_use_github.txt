# ==========================================================================
# ==========================================================================
1. Gitの基本的な使い方
  1-1 は初回のみ行い、基本的には軽微な変更でコミット、
  ある程度作業が進んだところで、プッシュを行う。
# ==========================================================================
1-1. Githubでリポジトリを作成する

  ログインした状態で、リモートリポジトリを作成する
# ==========================================================================
1-2. ローカルリポジトリを作成する

  git bashを開いて、cdコマンドやmkdirコマンドを使用して、ローカルPCにローカルリポジトリを作成する
  git init コマンドを使ってGitリポジトリを作成する

  C:\Users\catch\git\Barcode_System でローカルリポジトリを作成する場合

  C:\Users\catch\でgit bashを始めた場合
  mkdir git
  cd git
  mkdir Barcode_System
  cd Barcode_System
  git init

  git initコマンドを実行することで、カレントディレクトリをGitリポジトリに変換する
  
  # ========================================================================
  1-2-1. git initコマンドを間違ったディレクトリで行った場合

    以下のコマンドを実行する
    rm -rf .git

    rmコマンドは、ファイルやディレクトリを削除するコマンド
    -r ディレクトリを中身ごと削除するオプション
    -f エラーメッセージを表示せずに削除するオプション

# ==========================================================================
1-3. 現在の状態を確認する

  以下のコマンドを実行する
  git status

# ==========================================================================
1-4. ファイルを作成したら、インデックスに追加する

  インデックスは、リポジトリにコミットするために変更内容を一時的に保存する場所のこと

  以下のコマンドを実行する
  git add test.py

# ==========================================================================
1-5. 変更結果をローカルリポジトリをコミットする

  インデックスに追加されたファイルをコミットする
  コミットとは、ファイルやディレクトリの追加や変更を記録する操作のこと

  以下のコマンドを実行する
  git commit -m "add new file"

  # ========================================================================
  1-5-1. コメントを変更したいとき

  まだpushしていないローカルのコミットのコメントを変更したい場合

  以下のコマンドを実行する
  git commit --amend -m "修正後のコミットメッセージ"

  # ========================================================================
  1-5-2. コミットのコメントが見たいとき

  pushしていないローカルのコミットのコメントを見たい場合

  以下のコマンドを実行する
  git commit --amend

# ==========================================================================
1-6. リモートリポジトリに反映させる前に、リモートリポジトリの情報を追加する

  以下のコマンドを実行する
  git remote add origin https://github.com/(自分のid)/Barcode_System.git

  ***fork先のリモートリポジトリは、originを別名に変更してコマンドを実行する
  git remote add true_origin https://github.com/music-rina-lover/Barcode_System.git

  # ========================================================================
  1-6-1. git remote add origin を間違ったURLで実行してしまった場合

  1. 現在のリモートURLを確認する
    git remote -v
    // もし、***の作業を行っていた場合は、originに設定したリポジトリのURLと
    // true_originに設定したリポジトリのURLの両方が表示されるはず

  2. 新しいリモートURLに変更する
    git remote set-url origin https://github.com/(自分のidとか)/Barcode_System.git
    // originの部分を変更すれば、違うリモートのリモートURLも変更できるようになる

  3. 変更したリモートURLを確認する
    git remote -v

# ==========================================================================
1-7. ローカルリポジトリをプッシュしてリモートリポジトリへ反映させる

  ローカルリポジトリの変更をGitHub上にあるリモートリポジトリに反映させる
  コマンドの最後のmasterは作業ブランチを指している
  originは、
  
  以下のコマンドを実行する
  git push origin main

# ==========================================================================
# ==========================================================================
# ==========================================================================
2. ブランチ
  ブランチとは並行して行われる複数バージョンの管理を行うための仕組み

  現在のブランチ一覧を見る場合は、以下のコマンドを実行する
  git branch
# ==========================================================================
2-1. ブランチの作成・移動
  2-1-1 ブランチの作成

    たとえば「sub1」というブランチを作成するときは、以下のコマンドを実行する
    git branch sub1

  2-1-2. ブランチの移動

    ブランチの移動をするときは、以下のコマンドを実行する
    git checkout sub1

  2-1-3. ブランチの作成・移動をまとめて実行する場合
    
    以下のコマンドを実行する
    git checkout -b sub1

  2-1-4. ブランチの削除をする場合
    
    以下のコマンドを実行する
    git branch -D sub1

# ==========================================================================
2-2. ブランチ内での開発作業
  
  ブランチが変わっても、やることは変わらない
  git add test_sub1.py
  git commit -m "add new file"
  git remote add origin https://github.com/music-rina-lover/Barcode_System.git
  git push origin sub1

# ==========================================================================
# ==========================================================================
# ==========================================================================
3. 他の人のレポジトリに参加する方法
  GitHub 上の他の人の Repository のソースを修正して、
  修正の取り込み依頼(PULLリクエスト) を送るまでの流れ

  2回目以降は、3-3から。
# ==========================================================================
3-1. 自分の参加したい Repository に移動して Fork ボタンを押す
  
  自分のアカウントのもとにForkされたRepositoryができたことを確認する

  例えば、ユーザー名「ta-hiru-apple4」の人が、
  「https://github.com/music-rina-lover/Barcode_System」
  にForkしたとき、自分のページに
  「https://github.com/ta-hiru-apple4/Barcode_System」
  ができていることを確認する。

# ==========================================================================
3-2. 自分のPC上に、ForkしたRepositoryをCloneする
  
  Cloneコマンドを使用して、自分のPCにForkしたリモートリポジトリの
  ローカルリポジトリを作成する

  ここでは、
  C:\Users\catch\git\Barcode_System にローカルリポジトリをCloneする場合

  C:\Users\catch\でgit bashを始めた場合
  mkdir git
  cd git  // ローカルリポジトリを作成したいディレクトリまで移動する
  git clone https://github.com/music-rina-lover/Barcode_System.git
  // cloneしたときは、リモートリポジトリの名前のディレクトリができて、
  // その中にローカルリポジトリが完成する

  この時、作業ブランチが、デフォルトのブランチ「development」であることを確認する
  // 今回はdevelopmentだが、普通はmain
  // デフォルトブランチの確認方法は、fork先のリモートリポジトリのブランチを見ればわかる

# ==========================================================================
3-3. fork先のリモートリポジトリと同期させる(ブランチ間を同期させるのにも使える)

  ここで、自分のローカルリポジトリとリモートリポジトリのmainブランチをfork先のリモートリポジトリと同期させる
  まず、mainブランチに移動する(ブランチの移動方法は2-1-2)
  git checkout main
  
  以下のコマンドを実行する
  git fetch true_origin
  git merge true_origin/development
  // 意味としては、fork先のリモートリポジトリのデフォルトブランチと同じデータにするということ
  // true_originの意味は1-6
  // デフォルトブランチの確認方法は、fork先のリモートリポジトリのブランチを見ればわかる
  git push origin main
  // ここで、自分のリモートリポジトリのmainブランチにpushすることで
  // 自分のリモートリポジトリがFork先のリモートリポジトリと同期することになる

# ==========================================================================
3-4. ローカルPC上に作業用のブランチを作成もしくは移動する
  
  forkしたRepositoryのブランチから自分が作業するためのブランチを
  分岐させるように作成もしくは移動する。
  詳しくは、2-1 参照。

  基本的にはissueの番号を紐づけた名前を付けるのがいい。
  issueには、修正内容などやるべき事柄が書いてある。
  たとえば、#1のissueを解決するブランチであれば、
  git checkout -b mainfile_#1
  のように、「(自分でつけた名前)_#(issue number)」とするようなイメージ。

# ==========================================================================
3-5. 自分で作った作業用ブランチにいるかどうかを確認する
  
  以下のコマンドを実行する
  git branch
  そうすると、branchが並んでいるので、自分で作成したissueの番号が紐づけられた
  branchの文字列の前に * マークがつけば大丈夫。

# ==========================================================================
3-6. ファイルを修正して、作業用ブランチにコミットする。

  1-4と1-5の操作をして、インデックスとコミットを行う。
  ただし、コミットの際のコメントは、issue番号が割り振られている作業内容に関しては、
  "(改善したところなどのコメント)(半角スペース)close(半角スペース)#(issue number)"
  とすること。
  これにすることによって、closeしてpushの際にissueと紐づけができる。
  
# ==========================================================================
3-7. 自分のリポジトリにPUSHする

  ここで、ある程度コミットしていたり、作業を一回中断する場合などには
  自分のリポジトリにPUSHする。

  以下のコマンドを実行する
  git push origin (作業ブランチ)

# ==========================================================================
3-8. PULLリクエストを送信する

  PUSHを終えたら、自分のリモートリポジトリのページを見る。
  「Compare & Pull request」と書いてある緑色のボタンがあるので、それをクリック。
  自分のリモートリポジトリ・現在自分で作業していたブランチから、
  fork先のリモートリポジトリ・作業用のブランチにリクエストされるように設定されているのを
  確認し、より詳細な情報を共有したい場合にはWrite欄に記入し、「Create pull request」ボタンをクリックする。

# ==========================================================================
3-9. pull requestsに通知がある場合(Collaborators向け)

  Pull requestsに通知がある場合は、リストを確認する。
  リストの中には、「Conversation」がトップにあり、PULLリクエストの際に記述されたコメントなどを見ることができる。
  また、「Files Changed」には、以前のバージョンからソースのどの部分が変更されたかが分かるようになっている。
  実際に変更箇所が正しく動作するかどうかを検証し、「Review changes」に意見を記述する。
  意見を集めてよさそうであれば、「Merge pull request」をクリックして、内容をリクエストのあったブランチにPullする。
  この時、「Confirm merge」というところにコメントする欄があるが、何も変更せずにボタンを押す。

  # ========================================================================
  3-9-1. Review changesに意見を書く

    それぞれのReview changesの選択欄の意味は以下のとおりである。
    ・Comment...肯定も否定もせず、意見を述べるだけ
    ・Approve...肯定的な意見(errorや処理ミスがない)
    ・Request changes...否定的な意見(errorや処理ミスが見つかった)
    
